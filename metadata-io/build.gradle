apply plugin: 'java'
apply plugin: 'org.hidetake.swagger.generator'

configurations {
  enhance
}

dependencies {
  implementation externalDependency.jsonPatch
 implementation project(':entity-registry')
 implementation project(':metadata-utils')
 implementation project(':metadata-events:mxe-avro-1.7')
 implementation project(':metadata-events:mxe-registration')
 implementation project(':metadata-events:mxe-utils-avro-1.7')
 implementation project(path: ':metadata-models')
 implementation project(':metadata-service:restli-client')

 implementation spec.product.pegasus.data
 implementation spec.product.pegasus.generator

 implementation externalDependency.dgraph4j exclude group: 'com.google.guava', module: 'guava'
  implementation externalDependency.slf4jApi
  testImplementation project(path: ':metadata-integration:java:datahub-client')
 runtimeOnly externalDependency.logbackClassic
  compileOnly externalDependency.lombok
  implementation externalDependency.commonsCollections
 implementation externalDependency.datastaxOssNativeProtocol
 implementation externalDependency.datastaxOssCore
 implementation externalDependency.datastaxOssQueryBuilder
 implementation externalDependency.elasticSearchRest
 implementation externalDependency.elasticSearchTransport
 implementation externalDependency.javatuples
 implementation externalDependency.javaxValidation
  runtimeOnly externalDependency.jna
 implementation externalDependency.kafkaClients
 implementation externalDependency.ebean
  enhance externalDependency.ebeanAgent
 implementation externalDependency.opentelemetryAnnotations
 implementation externalDependency.resilience4j
 implementation externalDependency.springContext
 implementation externalDependency.swaggerAnnotations
  swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.33'
 implementation (externalDependency.mixpanel) {
    exclude group: 'org.json', module: 'json'
  }

  annotationProcessor externalDependency.lombok

  testImplementation  externalDependency.testng
  testImplementation  externalDependency.h2
  testImplementation  externalDependency.mysqlConnector
  testImplementation  externalDependency.neo4jHarness
  testImplementation  externalDependency.mockito
  testImplementation  externalDependency.mockitoInline
  testImplementation  externalDependency.iStackCommons
  testImplementation  externalDependency.resilience4j
  testImplementation  externalDependency.testContainers
  testImplementation  externalDependency.testContainersJunit
  testImplementation  externalDependency.testContainersElasticsearch
  testImplementation  externalDependency.testContainersCassandra
  testImplementation  externalDependency.lombok
  testImplementation  project(':test-models')
  testImplementation externalDependency.springBootTest
  testImplementation project(':datahub-graphql-core')
  // logback >=1.3 required due to `testcontainers` only
  testImplementation 'ch.qos.logback:logback-classic:1.4.7'

  testAnnotationProcessor externalDependency.lombok

  constraints {
    implementation(externalDependency.log4jCore) {
        because("previous versions are vulnerable to CVE-2021-45105")
    }
    implementation(externalDependency.log4jApi) {
        because("previous versions are vulnerable to CVE-2021-45105")
    }
    implementation(externalDependency.commonsText) {
      because("previous versions are vulnerable to CVE-2022-42889")
    }
    implementation(externalDependency.snakeYaml) {
      because("previous versions are vulnerable to CVE-2022-25857")
    }
    implementation(externalDependency.woodstoxCore) {
      because("previous versions are vulnerable to CVE-2022-40151-2")
    }
    implementation(externalDependency.jettison) {
      because("previous versions are vulnerable")
    }
  }
}

test {
  // https://docs.gradle.org/current/userguide/performance.html
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  testLogging.showStandardStreams = true
  testLogging.exceptionFormat = 'full'
}

tasks.withType(Test) {
    enableAssertions = false
}

project.compileJava {
  doLast {
    ant.taskdef(name: 'ebean', classname: 'io.ebean.enhance.ant.AntEnhanceTask',
        classpath: project.configurations.enhance.asPath)
    ant.ebean(classSource: "${project.buildDir}/classes/java/main", packages: 'com.linkedin.metadata.entity.ebean',
        transformArgs: 'debug=1')
  }
}

tasks.register('generateOpenApiPojos', GenerateSwaggerCode) {
  it.setInputFile(
      file(
          "${project(':metadata-models').projectDir}/src/generatedJsonSchema/combined/open-api.yaml"
      )
  )
  it.setOutputDir(file("$projectDir/generated"))
  it.setLanguage("spring")
  it.setComponents(['models'])
  it.setTemplateDir(file("$projectDir/src/main/resources/JavaSpring"))
  it.setAdditionalProperties([
      "group-id" : "io.datahubproject",
      "dateLibrary" : "java8",
      "java11" : "true",
      "modelPropertyNaming" : "original",
      "modelPackage" : "io.datahubproject.openapi.generated"] as Map<String, String>)

  dependsOn ':metadata-models:generateJsonSchema'
}

compileJava.dependsOn generateOpenApiPojos
sourceSets.main.java.srcDir "${generateOpenApiPojos.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${generateOpenApiPojos.outputDir}/src/main/resources"

checkstyleMain.exclude '**/generated/**'
